// üöÄ Export Button - –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å Inngest –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ Promo-Video-Beta

"use client";
import React, { useState, useEffect } from "react";
import { Button } from "../ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import {
  DownloadIcon,
  Loader2,
  Sparkles,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { useVideoFrame } from "../context/VideoFrameContext";
import { toast } from "sonner";

interface ExportButtonProps {
  activeTemplate: "lipSync" | "promo" | "lottie";
}

interface RenderStatus {
  video_id?: string;
  status?: string;
  progress?: number;
  output_url?: string;
  error_message?: string;
  estimated_completion?: string;
}

export default function ExportButton({ activeTemplate }: ExportButtonProps) {
  const { videoFrames } = useVideoFrame();
  const [loading, setLoading] = useState(false);
  const [renderStatus, setRenderStatus] = useState<RenderStatus | null>(null);
  const [templateType, setTemplateType] = useState(activeTemplate);
  const [videoTitle, setVideoTitle] = useState("");

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º templateType —Å activeTemplate
  useEffect(() => {
    setTemplateType(activeTemplate);
  }, [activeTemplate]);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
  const prepareRenderData = () => {
    const baseData = {
      template_name: getCompositionName(),
      template_type: templateType,
      video_title:
        videoTitle ||
        `${templateType} –≤–∏–¥–µ–æ ${new Date().toLocaleDateString()}`,
      video_description: `–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —Å —à–∞–±–ª–æ–Ω–æ–º ${templateType}`,
    };

    switch (templateType) {
      case "promo":
      case "lottie":
        return {
          ...baseData,
          video_frames: videoFrames,
        };

      case "lipSync":
        return {
          ...baseData,
          config: {
            mainText: "–ù–û–í–ê–Ø –ú–û–î–ï–õ–¨ GEMINI",
            musicVolume: 0.5,
            vignetteStrength: 0.7,
            colorCorrection: 1.2,
            coverDuration: 2,
          },
          user_assets: {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
          },
        };

      default:
        return baseData;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
  const getCompositionName = () => {
    switch (templateType) {
      case "promo":
        return "promoVideo";
      case "lottie":
        return "lottiePromoVideo";
      case "lipSync":
        return "LipSyncTemplate";
      default:
        return "promoVideo";
    }
  };

  // üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Inngest
  const handleRender = async () => {
    if (!videoTitle.trim()) {
      toast.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ");
      return;
    }

    setLoading(true);
    setRenderStatus(null);

    try {
      const renderData = prepareRenderData();

      console.log("üé¨ Starting Inngest render:", renderData);

      const response = await fetch("/api/video/render-inngest", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-user-id": "dev-user-id-12345", // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏–∑ auth —Ç–æ–∫–µ–Ω–∞
        },
        body: JSON.stringify(renderData),
      });

      const result = await response.json();

      if (result.success) {
        toast.success("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∏–∂–µ.");

        setRenderStatus({
          video_id: result.video_id,
          status: "queued",
          progress: 0,
        });

        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
        startStatusPolling(result.video_id);
      } else {
        throw new Error(result.error || "Render failed");
      }
    } catch (error: any) {
      console.error("‚ùå Render error:", error);
      toast.error(`–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // üìä –ü–æ–ª–ª–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const startStatusPolling = async (videoId: string) => {
    const poll = async () => {
      try {
        const response = await fetch(
          `/api/video/render-status?video_id=${videoId}`,
          {
            headers: {
              "x-user-id": "dev-user-id-12345",
            },
          }
        );

        const status = await response.json();

        if (status.success) {
          setRenderStatus(status);

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
          if (status.status === "completed") {
            toast.success("üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.");
          } else if (status.status === "failed") {
            toast.error("‚ùå –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è");
          }

          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –µ—Å–ª–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
          if (
            status.status === "pending" ||
            status.status === "queued" ||
            status.status === "rendering"
          ) {
            setTimeout(poll, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
          }
        }
      } catch (error) {
        console.error("Error polling status:", error);
      }
    };

    poll();
  };

  // üé® –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = () => {
    switch (renderStatus?.status) {
      case "completed":
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case "failed":
        return <XCircle className="h-4 w-4 text-red-600" />;
      case "rendering":
        return <Loader2 className="h-4 w-4 animate-spin text-blue-600" />;
      default:
        return <Sparkles className="h-4 w-4 text-gray-600" />;
    }
  };

  // üé® –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = () => {
    switch (renderStatus?.status) {
      case "completed":
        return "text-green-600";
      case "failed":
        return "text-red-600";
      case "rendering":
        return "text-blue-600";
      default:
        return "text-gray-600";
    }
  };

  return (
    <div className="space-y-4">
      {/* Template Type Selection */}
      <div className="flex flex-col gap-2">
        <label className="text-sm font-medium text-gray-700">
          üé≠ –¢–∏–ø —à–∞–±–ª–æ–Ω–∞
        </label>
        <Select
          value={templateType}
          onValueChange={(v) => setTemplateType(v as any)}
        >
          <SelectTrigger className="w-full">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="promo">üé¨ Promo Video</SelectItem>
            <SelectItem value="lipSync">üé§ Lip Sync Avatar</SelectItem>
            <SelectItem value="lottie">‚ú® Lottie Animation</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Video Title */}
      <div className="flex flex-col gap-2">
        <label className="text-sm font-medium text-gray-700">
          üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        </label>
        <input
          type="text"
          value={videoTitle}
          onChange={(e) => setVideoTitle(e.target.value)}
          placeholder={`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è ${templateType} –≤–∏–¥–µ–æ`}
          className="w-full p-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Export Button */}
      <Button
        onClick={handleRender}
        disabled={loading || !videoTitle.trim()}
        className="w-full flex gap-2 items-center bg-green-600 hover:bg-green-700 disabled:bg-gray-400"
      >
        {loading ? (
          <Loader2 className="h-4 w-4 animate-spin" />
        ) : (
          <Sparkles className="h-4 w-4" />
        )}
        üöÄ –≠–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ Inngest
      </Button>

      {/* Render Status */}
      {renderStatus && (
        <div className="border rounded-lg p-3 bg-gray-50">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium">üìä –°—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞</span>
            {getStatusIcon()}
          </div>

          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>–°—Ç–∞—Ç—É—Å:</span>
              <span className={`font-medium ${getStatusColor()}`}>
                {renderStatus.status}
              </span>
            </div>

            {renderStatus.progress !== undefined && (
              <div>
                <div className="flex justify-between text-xs mb-1">
                  <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                  <span>{renderStatus.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${renderStatus.progress}%` }}
                  />
                </div>
              </div>
            )}

            {renderStatus.estimated_completion && (
              <div className="flex justify-between text-xs">
                <span>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
                <span>
                  {new Date(
                    renderStatus.estimated_completion
                  ).toLocaleTimeString()}
                </span>
              </div>
            )}

            {renderStatus.error_message && (
              <div className="text-red-600 text-xs">
                –û—à–∏–±–∫–∞: {renderStatus.error_message}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Download Button */}
      {renderStatus?.output_url && (
        <Button
          onClick={() => window.open(renderStatus.output_url)}
          className="w-full flex gap-2 bg-blue-600 hover:bg-blue-700"
        >
          <DownloadIcon className="h-4 w-4" />
          üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
        </Button>
      )}

      {/* Info Note */}
      <div className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
        üí° <strong>Inngest Queue:</strong> –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º
        —Ä–µ–∂–∏–º–µ. –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: ~2-5 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
      </div>
    </div>
  );
}

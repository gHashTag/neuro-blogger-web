import React, { useState } from "react";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  //@ts-ignore
} from "@nextui-org/react";
import { Controller, useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Button as MovingBorderButton } from "@/components/ui/moving-border";
import styled from "styled-components";
import { cn } from "@/utils/cn";
import { InputMultiline } from "../ui/input-multiline";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";

// üé® Styled Components
const CustomModalContent = styled(ModalContent)`
  background-color: hsl(var(--background));
  color: hsl(var(--foreground));
  border-radius: 15px;
  min-width: 600px;
  max-width: 800px;
`;

const GradientCard = styled(Card)`
  background: linear-gradient(
    135deg,
    hsl(var(--primary)) 0%,
    hsl(var(--secondary)) 100%
  );
  border: 1px solid hsl(var(--border));
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
`;

// üìù Types
interface AvatarCreationForm {
  method: "text" | "photo" | "video";
  prompt?: string;
  style: "realistic" | "animated" | "stylized";
  name: string;
  description?: string;
}

interface AvatarCreationModalProps {
  isOpen: boolean;
  onOpen: () => void;
  onOpenChange: () => void;
  onAvatarCreated: (avatar: any) => void;
}

// üé≠ Avatar Creation Steps
const CREATION_STEPS = [
  { id: 1, title: "–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞", description: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∞?" },
  { id: 2, title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞", description: "–î–µ—Ç–∞–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞" },
  { id: 3, title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è", description: "–°–æ–∑–¥–∞–Ω–∏–µ AI –∞–≤–∞—Ç–∞—Ä–∞" },
  { id: 4, title: "–†–µ–∑—É–ª—å—Ç–∞—Ç", description: "–ì–æ—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä" },
];

const AVATAR_METHODS = [
  {
    id: "text",
    title: "üé® –ò–∑ –û–ø–∏—Å–∞–Ω–∏—è",
    description: "AI —Å–æ–∑–¥–∞—Å—Ç –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é",
    example: "–ú–æ–ª–æ–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –∫–ª–µ—Ç—á–∞—Ç–æ–π —Ä—É–±–∞—à–∫–µ...",
    recommended: true,
  },
  {
    id: "photo",
    title: "üì∏ –ò–∑ –§–æ—Ç–æ",
    description: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ 10-15 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
    example: "–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞",
    recommended: false,
  },
  {
    id: "video",
    title: "üé¨ –ò–∑ –í–∏–¥–µ–æ",
    description: "2-–º–∏–Ω—É—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –≥–∏–ø–µ—Ä-—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞",
    example: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ lip-sync",
    recommended: false,
  },
];

const STYLE_OPTIONS = [
  {
    id: "realistic",
    title: "üéØ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
    description: "–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å",
  },
  {
    id: "animated",
    title: "üé® –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
    description: "–ú—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å",
  },
  {
    id: "stylized",
    title: "‚ú® –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π",
    description: "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å",
  },
];

export function AvatarCreationModal({
  isOpen,
  onOpen,
  onOpenChange,
  onAvatarCreated,
}: AvatarCreationModalProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);

  const { control, handleSubmit, watch, setValue, getValues } =
    useForm<AvatarCreationForm>({
      defaultValues: {
        method: "text",
        style: "realistic",
        name: "",
        prompt: "",
        description: "",
      },
    });

  const selectedMethod = watch("method");
  const selectedStyle = watch("style");

  // üéØ Navigation Functions
  const nextStep = () => {
    if (currentStep < CREATION_STEPS.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const resetModal = () => {
    setCurrentStep(1);
    setIsGenerating(false);
    setGenerationProgress(0);
  };

  // üöÄ Avatar Generation Function
  const generateAvatar = async (data: AvatarCreationForm) => {
    setIsGenerating(true);
    setGenerationProgress(0);
    nextStep(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    try {
      console.log("üé® Creating avatar with API:", data);

      // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ API
      const createResponse = await fetch("/api/avatar/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          method: data.method,
          name: data.name,
          description: data.description,
          style: data.style,
          prompt: data.prompt,
        }),
      });

      if (!createResponse.ok) {
        throw new Error(`Avatar creation failed: ${createResponse.statusText}`);
      }

      const createResult = await createResponse.json();

      if (!createResult.success) {
        throw new Error(createResult.error || "Avatar creation failed");
      }

      const avatarId = createResult.avatar.id;
      console.log("‚úÖ Avatar creation started:", avatarId);

      // üîÑ –ü–æ–ª–ª–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const pollStatus = async () => {
        try {
          const statusResponse = await fetch(`/api/avatar/status/${avatarId}`);

          if (!statusResponse.ok) {
            throw new Error(
              `Status check failed: ${statusResponse.statusText}`
            );
          }

          const statusResult = await statusResponse.json();

          if (!statusResult.success) {
            throw new Error(statusResult.error || "Status check failed");
          }

          const avatar = statusResult.avatar;
          console.log("üìä Avatar status:", avatar.status);

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
          switch (avatar.status) {
            case "processing":
              setGenerationProgress((prev) => Math.min(90, prev + 5));
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
              setTimeout(pollStatus, 2000);
              break;

            case "ready":
              setGenerationProgress(100);
              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
              setTimeout(() => {
                nextStep();
                onAvatarCreated(avatar);
              }, 1000);
              break;

            case "failed":
              throw new Error("Avatar generation failed");

            default:
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
              setTimeout(pollStatus, 2000);
              break;
          }
        } catch (pollError) {
          console.error("‚ùå Status polling failed:", pollError);
          throw pollError;
        }
      };

      // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(pollStatus, 2000);
    } catch (error) {
      console.error("‚ùå Avatar generation failed:", error);
      setIsGenerating(false);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å state –¥–ª—è error)
      alert(
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: ${
          error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
      setCurrentStep(2);
    }
  };

  // üé® Render Step Content
  const renderStepContent = () => {
    switch (currentStep) {
      case 1: // –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-4">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:
              </h3>
              <div className="grid gap-4">
                {AVATAR_METHODS.map((method) => (
                  <GradientCard
                    key={method.id}
                    className={cn(
                      "p-4 cursor-pointer border-2 transition-all",
                      selectedMethod === method.id
                        ? "border-primary ring-2 ring-primary/20"
                        : "border-border hover:border-primary/50"
                    )}
                    onClick={() => setValue("method", method.id as any)}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <h4 className="font-medium text-foreground">
                            {method.title}
                          </h4>
                          {method.recommended && (
                            <Badge variant="secondary">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º</Badge>
                          )}
                        </div>
                        <p className="text-sm text-muted-foreground mb-2">
                          {method.description}
                        </p>
                        <p className="text-xs text-muted-foreground italic">
                          {method.example}
                        </p>
                      </div>
                      <div
                        className={cn(
                          "w-4 h-4 rounded-full border-2 transition-all",
                          selectedMethod === method.id
                            ? "bg-primary border-primary"
                            : "border-muted-foreground"
                        )}
                      />
                    </div>
                  </GradientCard>
                ))}
              </div>
            </div>
          </div>
        );

      case 2: // –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        return (
          <div className="space-y-6">
            {/* –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞ */}
            <div>
              <Label htmlFor="name">–ò–º—è –∞–≤–∞—Ç–∞—Ä–∞ *</Label>
              <div className="mt-2">
                <Controller
                  name="name"
                  control={control}
                  rules={{ required: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞" }}
                  render={({ field, fieldState }) => (
                    <Input
                      {...field}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–π –ë–∏–∑–Ω–µ—Å –ê–≤–∞—Ç–∞—Ä"
                      className={fieldState.error ? "border-red-500" : ""}
                    />
                  )}
                />
              </div>
            </div>

            {/* –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ */}
            {selectedMethod === "text" && (
              <div>
                <Label htmlFor="prompt">–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ *</Label>
                <div className="mt-2">
                  <Controller
                    name="prompt"
                    control={control}
                    rules={{ required: "–û–ø–∏—à–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä–∞" }}
                    render={({ field, fieldState }) => (
                      <InputMultiline
                        {...field}
                        placeholder="–ú–æ–ª–æ–¥–æ–π IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—É–±–∞—à–∫–µ, —Å–∏–¥—è—â–∏–π –≤ —É—é—Ç–Ω–æ–º –æ—Ñ–∏—Å–µ —Å –º—è–≥–∫–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º. –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è —É–ª—ã–±–∫–∞, —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥..."
                        className={fieldState.error ? "border-red-500" : ""}
                        rows={4}
                      />
                    )}
                  />
                </div>
              </div>
            )}

            {/* –°—Ç–∏–ª—å –∞–≤–∞—Ç–∞—Ä–∞ */}
            <div>
              <Label>–°—Ç–∏–ª—å –∞–≤–∞—Ç–∞—Ä–∞</Label>
              <div className="grid grid-cols-3 gap-3 mt-2">
                {STYLE_OPTIONS.map((style) => (
                  <Card
                    key={style.id}
                    className={cn(
                      "p-3 cursor-pointer border-2 transition-all text-center",
                      selectedStyle === style.id
                        ? "border-primary bg-primary/5"
                        : "border-border hover:border-primary/50"
                    )}
                    onClick={() => setValue("style", style.id as any)}
                  >
                    <div className="text-lg mb-1">{style.title}</div>
                    <div className="text-xs text-muted-foreground">
                      {style.description}
                    </div>
                  </Card>
                ))}
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
            <div>
              <Label htmlFor="description">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</Label>
              <div className="mt-2">
                <Controller
                  name="description"
                  control={control}
                  render={({ field }) => (
                    <InputMultiline
                      {...field}
                      placeholder="–õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                      rows={2}
                    />
                  )}
                />
              </div>
            </div>
          </div>
        );

      case 3: // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        return (
          <div className="space-y-6 text-center">
            <div>
              <h3 className="text-lg font-semibold mb-2">
                üé® –°–æ–∑–¥–∞–µ–º –≤–∞—à –∞–≤–∞—Ç–∞—Ä...
              </h3>
              <p className="text-muted-foreground mb-6">
                –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã. HeyGen AI —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞!
              </p>
            </div>

            <div className="space-y-4">
              <Progress value={generationProgress} className="w-full h-3" />
              <div className="text-sm text-muted-foreground">
                {generationProgress < 30 && "üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ..."}
                {generationProgress >= 30 &&
                  generationProgress < 60 &&
                  "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç—å..."}
                {generationProgress >= 60 &&
                  generationProgress < 90 &&
                  "üé≠ –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏—è –∏ –º–∏–º–∏–∫—É..."}
                {generationProgress >= 90 && "‚ú® –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..."}
              </div>
            </div>

            <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
              <div className="animate-spin w-4 h-4 border-2 border-primary border-t-transparent rounded-full" />
              –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(generationProgress)}%
            </div>
          </div>
        );

      case 4: // –†–µ–∑—É–ª—å—Ç–∞—Ç
        return (
          <div className="space-y-6 text-center">
            <div>
              <h3 className="text-lg font-semibold mb-2">üéâ –ê–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!</h3>
              <p className="text-muted-foreground mb-6">
                –í–∞—à AI –∞–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–∏–¥–µ–æ!
              </p>
            </div>

            <GradientCard className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center">
                  <span className="text-2xl">üé≠</span>
                </div>
                <div className="flex-1 text-left">
                  <h4 className="font-semibold">{getValues("name")}</h4>
                  <p className="text-sm text-muted-foreground">
                    {getValues("style")} ‚Ä¢ {getValues("method")}
                  </p>
                  <Badge variant="outline" className="mt-2">
                    –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                  </Badge>
                </div>
              </div>
            </GradientCard>

            <div className="text-sm text-muted-foreground">
              üí° –°–æ–≤–µ—Ç: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∞–≤–∞—Ç–∞—Ä –≤ –ª—é–±–æ–π –≤–∏–¥–µ–æ
              —à–∞–±–ª–æ–Ω!
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Modal isOpen={isOpen} onOpenChange={onOpenChange} size="2xl">
      <MovingBorderButton onClick={onOpen} className="w-auto px-6">
        üé≠ –°–æ–∑–¥–∞—Ç—å AI –ê–≤–∞—Ç–∞—Ä
      </MovingBorderButton>

      <CustomModalContent>
        {(onClose: any) => (
          <>
            <ModalHeader className="flex flex-col gap-1">
              <div className="flex items-center justify-between w-full">
                <span className="text-xl font-bold">
                  üé≠ –°–æ–∑–¥–∞–Ω–∏–µ AI –ê–≤–∞—Ç–∞—Ä–∞
                </span>
                <Badge variant="outline">
                  –®–∞–≥ {currentStep} –∏–∑ {CREATION_STEPS.length}
                </Badge>
              </div>

              {/* Progress Steps */}
              <div className="flex items-center gap-2 mt-4 w-full">
                {CREATION_STEPS.map((step, index) => (
                  <React.Fragment key={step.id}>
                    <div className="flex items-center gap-2">
                      <div
                        className={cn(
                          "w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium",
                          currentStep >= step.id
                            ? "bg-primary text-primary-foreground"
                            : "bg-muted text-muted-foreground"
                        )}
                      >
                        {currentStep > step.id ? "‚úì" : step.id}
                      </div>
                      <div className="hidden sm:block">
                        <div className="text-xs font-medium">{step.title}</div>
                        <div className="text-xs text-muted-foreground">
                          {step.description}
                        </div>
                      </div>
                    </div>
                    {index < CREATION_STEPS.length - 1 && (
                      <div
                        className={cn(
                          "flex-1 h-px",
                          currentStep > step.id ? "bg-primary" : "bg-border"
                        )}
                      />
                    )}
                  </React.Fragment>
                ))}
              </div>
            </ModalHeader>

            <ModalBody className="px-6 py-4">{renderStepContent()}</ModalBody>

            <ModalFooter className="flex justify-between">
              <div>
                {currentStep > 1 && currentStep < 3 && (
                  <Button
                    variant="outline"
                    onClick={prevStep}
                    disabled={isGenerating}
                  >
                    ‚Üê –ù–∞–∑–∞–¥
                  </Button>
                )}
              </div>

              <div className="flex gap-2">
                {currentStep < 2 && (
                  <Button onClick={nextStep} disabled={!getValues("method")}>
                    –î–∞–ª–µ–µ ‚Üí
                  </Button>
                )}

                {currentStep === 2 && (
                  <Button
                    onClick={handleSubmit(generateAvatar)}
                    disabled={
                      !getValues("name") ||
                      (selectedMethod === "text" && !getValues("prompt"))
                    }
                  >
                    üöÄ –°–æ–∑–¥–∞—Ç—å –ê–≤–∞—Ç–∞—Ä
                  </Button>
                )}

                {currentStep === 4 && (
                  <>
                    <Button
                      variant="outline"
                      onClick={() => {
                        resetModal();
                        onClose();
                      }}
                    >
                      –ó–∞–∫—Ä—ã—Ç—å
                    </Button>
                    <Button
                      onClick={() => {
                        resetModal();
                        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
                        console.log("üé¨ Navigate to video creation");
                        onClose();
                      }}
                    >
                      üé¨ –°–æ–∑–¥–∞—Ç—å –í–∏–¥–µ–æ
                    </Button>
                  </>
                )}
              </div>
            </ModalFooter>
          </>
        )}
      </CustomModalContent>
    </Modal>
  );
}

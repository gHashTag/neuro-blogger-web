// üé¨ Inngest Functions –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–∞—à–µ–π Supabase –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

import { inngest } from "./client";
import { supabase } from "../utils/supabase";
import { renderVideoLocally } from "../utils/video/local-render";
import { DEV_AUTH_BYPASS } from "../utils/constants";

// üé® –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ)
export const GenerateAIVideoData = inngest.createFunction(
  { id: "generate-ai-video-data", name: "Generate AI Video Data" },
  { event: "ai/generate-video-data" },
  async ({ event, step }) => {
    try {
      const { prompt, videoId, userId } = event.data;

      console.log("ü§ñ Starting AI generation for video:", videoId);

      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –º–æ–¥–µ–ª—å—é
      const generateVideoData = await step.run(
        "Generate AI Video Data",
        async () => {
          // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
          return {
            frameList: [
              {
                animation: "fadeIn",
                bgColor: "#007AFF",
                duration: 1,
                fontFamily: "Outfit",
                fontSize: 48,
                text: prompt || "AI Generated Content",
                textColor: "rgba(255,255,255,1)",
              },
            ],
            music: "test-assets/news.mp3",
            totalDuration: 3,
            screenWidth: 720,
            screenHeight: 1280,
          };
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à–µ–π Supabase —Ç–∞–±–ª–∏—Ü–µ
      const updateRecord = await step.run("Update video record", async () => {
        console.log("üîÑ Updating video status to 'processing'");
        
        const { data, error } = await supabase
          .from("user_videos")
          .update({
            input_props: generateVideoData,
            render_status: "processing",
          })
          .eq("id", videoId)
          .eq("user_id", userId)
          .select();

        if (error) {
          throw new Error(`Failed to update video record: ${error.message}`);
        }

        return data;
      });

      return updateRecord;
    } catch (error) {
      console.error("üî• AI Generation Failed:", error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
      await supabase
        .from("user_videos")
        .update({ render_status: "failed", error_message: error instanceof Error ? error.message : String(error) })
        .eq("id", event.data.videoId);
      
      throw error;
    }
  }
);

// üé¨ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ
export const RenderVideoWithInngest = inngest.createFunction(
  { 
    id: "render-video-with-inngest", 
    name: "Render Video with Inngest",
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–ª–≥–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
    concurrency: { limit: 3 },
  },
  { event: "render/video" },
  async ({ event, step }) => {
    console.log("üöÄ Inngest video render started!");
    console.log("üì• Event data received:", JSON.stringify(event.data, null, 2));

    try {
      const {
        videoId,
        userId,
        composition = "LipSyncTemplate",
        inputProps,
        templateType = "lipSync",
      } = event.data;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!videoId || !userId) {
        throw new Error("‚ùå videoId and userId are required");
      }

      console.log(`üé¨ Starting render for video: ${videoId}, user: ${userId}`);

      // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      await step.run("Update status to rendering", async () => {
        const { error } = await supabase
          .from("user_videos")
          .update({
            render_status: "rendering",
            render_started_at: new Date().toISOString(),
            render_progress: 0,
          })
          .eq("id", videoId)
          .eq("user_id", userId);

        if (error) {
          throw new Error(`Failed to update status: ${error.message}`);
        }

        console.log("‚úÖ Status updated to 'rendering'");
      });

      // 2Ô∏è‚É£ –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–µ–æ
      const renderResult = await step.run("Render video", async () => {
        console.log("üé• Starting video render with Remotion...");
        console.log("üéØ Composition:", composition);
        console.log("üéØ Template type:", templateType);
        console.log("üéØ Input props:", JSON.stringify(inputProps, null, 2));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Cloud Run/Lambda
        return await renderVideoLocally({
          composition,
          inputProps,
          videoId,
        });
      });

      // 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (renderResult.type === "success") {
        console.log("‚úÖ Render success:", renderResult.publicUrl);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
        await step.run("Update final status", async () => {
          const { error } = await supabase
            .from("user_videos")
            .update({
              render_status: "completed",
              output_url: renderResult.publicUrl,
              output_path: renderResult.localPath,
              render_completed_at: new Date().toISOString(),
              render_progress: 100,
            })
            .eq("id", videoId)
            .eq("user_id", userId);

          if (error) {
            throw new Error(`Failed to update final status: ${error.message}`);
          }

          console.log("‚úÖ Video render completed successfully");
        });

        // 4Ô∏è‚É£ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await step.run("Send notification", async () => {
          // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å email/push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          console.log("üìß Notification sent to user:", userId);
        });

        return { 
          success: true, 
          videoUrl: renderResult.publicUrl,
          videoId,
        };
      } else {
        throw new Error(`Render failed: ${renderResult.type}`);
      }

    } catch (error) {
      console.error("üö® Render Failed:", error);
      console.error("üö® Error stack:", error instanceof Error ? error.stack : "No stack trace");

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
      try {
        await supabase
          .from("user_videos")
          .update({
            render_status: "failed",
            error_message: error instanceof Error ? error.message : String(error),
            render_completed_at: new Date().toISOString(),
          })
          .eq("id", event.data?.videoId)
          .eq("user_id", event.data?.userId);
      } catch (dbError) {
        console.error("üö® Failed to update database status:", dbError);
      }

      throw error;
    }
  }
);

// üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export const CheckRenderStatus = inngest.createFunction(
  { id: "check-render-status", name: "Check Render Status" },
  { event: "render/check-status" },
  async ({ event, step }) => {
    const { videoId, userId } = event.data;

    const statusCheck = await step.run("Check video status", async () => {
      const { data, error } = await supabase
        .from("user_videos")
        .select("render_status, render_progress, output_url, error_message")
        .eq("id", videoId)
        .eq("user_id", userId)
        .single();

      if (error) {
        throw new Error(`Failed to check status: ${error.message}`);
      }

      return data;
    });

    console.log(`üìä Status check for video ${videoId}:`, statusCheck);
    return statusCheck;
  }
);

// üßπ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ (cron job)
export const CleanupOldVideos = inngest.createFunction(
  { id: "cleanup-old-videos", name: "Cleanup Old Videos" },
  { cron: "0 2 * * *" }, // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
  async ({ step }) => {
    console.log("üßπ Starting cleanup of old videos...");

    const cleanup = await step.run("Cleanup old videos", async () => {
      // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const { data, error } = await supabase
        .from("user_videos")
        .delete()
        .lt("created_at", thirtyDaysAgo.toISOString())
        .select("id, output_path");

      if (error) {
        console.error("Failed to cleanup videos:", error);
        return { deleted: 0, error: error.message };
      }

      // TODO: –¢–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ storage
      
      console.log(`üóëÔ∏è Cleaned up ${data?.length || 0} old videos`);
      return { deleted: data?.length || 0 };
    });

    return cleanup;
  }
);
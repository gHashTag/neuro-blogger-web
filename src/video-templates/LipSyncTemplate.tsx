import React from "react";
import {
  AbsoluteFill,
  Audio,
  Img,
  Sequence,
  Video,
  useCurrentFrame,
  useVideoConfig,
  interpolate,
  spring,
} from "remotion";

export interface LipSyncTemplateProps {
  // üé§ –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ (–∞–≤–∞—Ç–∞—Ä - –ë–ê–ó–ê)
  lipSyncVideo: string;

  // üì∏ –û–±–ª–æ–∂–∫–∞
  coverImage: string;

  // üéµ –ê—É–¥–∏–æ
  backgroundMusic: string;
  musicVolume: number;

  // üé® 4 —Ñ–æ–Ω–æ–≤—ã—Ö —Å–ª–æ—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –∞–≤–∞—Ç–∞—Ä)
  backgroundVideos: string[];

  // ‚è±Ô∏è –¢–∞–π–º–∏–Ω–≥
  coverDuration: number;
  lipSyncDelay: number; // –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø

  // ‚ú® –ü—Ä–æ—Å—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  vignetteStrength: number;
  colorCorrection: number;
}

export const LipSyncTemplate: React.FC<
  LipSyncTemplateProps & Record<string, unknown>
> = ({
  lipSyncVideo,
  coverImage,
  backgroundMusic,
  musicVolume,
  backgroundVideos,
  coverDuration,
  lipSyncDelay,
  vignetteStrength = 0.7,
  colorCorrection = 1.2,
}) => {
  const { fps, durationInFrames } = useVideoConfig();
  const frame = useCurrentFrame();

  // üìä –¢–ê–ô–ú–ò–ù–ì –ü–ï–†–ï–•–û–î–û–í (–∞–≤–∞—Ç–∞—Ä ‚Üî BG —Ä–æ–ª–ª—ã)
  const totalDurationSeconds = durationInFrames / fps; // ~29 —Å–µ–∫—É–Ω–¥
  const coverDurationFrames = coverDuration * fps;

  // üé§ –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–∞–µ—Ç –≤—Å–µ–≥–¥–∞ (–ë–ê–ó–ê)
  const lipSyncStartFrame = 0;
  const lipSyncDurationFrames = durationInFrames;

  // üé¨ –ü–ï–†–ï–•–û–î–´: –ê–≤–∞—Ç–∞—Ä ‚Üí BG —Ä–æ–ª–ª ‚Üí –ê–≤–∞—Ç–∞—Ä ‚Üí BG —Ä–æ–ª–ª
  // –ü–æ—Å–ª–µ –æ–±–ª–æ–∂–∫–∏ (2—Å) –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥—ã –∫–∞–∂–¥—ã–µ ~5-7 —Å–µ–∫—É–Ω–¥
  const transitionDuration = 5; // —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π BG —Ä–æ–ª–ª
  const transitionFrames = transitionDuration * fps;
  const gapDuration = 2; // —Å–µ–∫—É–Ω–¥ –∞–≤–∞—Ç–∞—Ä–∞ –º–µ–∂–¥—É BG —Ä–æ–ª–ª–∞–º–∏
  const gapFrames = gapDuration * fps;

  // üé® –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ BG —Ä–æ–ª–ª–∞
  const bgSegments = [
    {
      name: "BG_01",
      video: backgroundVideos[0],
      startFrame: coverDurationFrames + gapFrames, // 2—Å + 2—Å = 4—Å
      durationFrames: transitionFrames, // 5—Å
    },
    {
      name: "BG_02",
      video: backgroundVideos[1],
      startFrame:
        coverDurationFrames + gapFrames + transitionFrames + gapFrames, // 4—Å + 5—Å + 2—Å = 11—Å
      durationFrames: transitionFrames, // 5—Å
    },
    {
      name: "BG_03",
      video: backgroundVideos[2],
      startFrame:
        coverDurationFrames + (gapFrames + transitionFrames) * 2 + gapFrames, // 18—Å
      durationFrames: transitionFrames, // 5—Å
    },
    {
      name: "BG_04",
      video: backgroundVideos[3],
      startFrame:
        coverDurationFrames + (gapFrames + transitionFrames) * 3 + gapFrames, // 25—Å
      durationFrames: Math.min(
        transitionFrames,
        durationInFrames -
          (coverDurationFrames + (gapFrames + transitionFrames) * 3 + gapFrames)
      ), // –¥–æ –∫–æ–Ω—Ü–∞
    },
  ];

  // –£–¥–∞–ª–µ–Ω–æ: getCurrentBgSegment –∏ currentBgSegment - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ Sequence

  // üé¨ –ü–†–û–°–¢–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø: FULLSCREEN ‚Üí –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï –í –û–î–ò–ù –®–ê–ì
  const fadeStartFrame = Math.max(1, coverDurationFrames - fps * 0.3); // –ú–∏–Ω–∏–º—É–º 1 –∫–∞–¥—Ä –¥–æ –∫–æ–Ω—Ü–∞
  const coverOpacity = interpolate(
    frame,
    [0, fadeStartFrame, coverDurationFrames],
    [1, 1, 0], // –í–∏–¥–∏–º–∞—è –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—Ç–æ–º —Ä–µ–∑–∫–æ –∏—Å—á–µ–∑–∞–µ—Ç
    { extrapolateLeft: "clamp", extrapolateRight: "clamp" }
  );

  // –ú–∞—Å—à—Ç–∞–±: –û–î–ò–ù –í –û–î–ò–ù ‚Üí –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
  const coverScale = interpolate(
    frame,
    [0, fadeStartFrame, coverDurationFrames],
    [1.0, 1.0, 0], // –ù–∞—á–∏–Ω–∞–µ–º 1:1, –¥–µ—Ä–∂–∏–º, –ø–æ—Ç–æ–º —Å–∂–∏–º–∞–µ–º—Å—è –≤ —Ç–æ—á–∫—É
    { extrapolateLeft: "clamp", extrapolateRight: "clamp" }
  );

  // üé≠ –ê–ù–ò–ú–ê–¶–ò–ò –ò –ü–ï–†–ï–•–û–î–´

  // –£–¥–∞–ª–µ–Ω–æ: getTransitionOpacity –∏ bgOpacity - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∫–∞–∂–¥–æ–º Sequence

  // üí´ Vignette —ç—Ñ—Ñ–µ–∫—Ç
  const vignetteOpacity = vignetteStrength;

  // üé® Color Correction
  const ccFilter = `brightness(${colorCorrection}) contrast(1.1) saturate(1.2)`;

  return (
    <AbsoluteFill style={{ backgroundColor: "#000" }}>
      {/* üéµ –ù–ò–ó: Audio_01 - —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ */}
      <Audio src={backgroundMusic} volume={musicVolume} />

      {/* üé§ –ë–ê–ó–ê: Lip-sync –≤–∏–¥–µ–æ (–∞–≤–∞—Ç–∞—Ä) - –°–ê–ú–´–ô –ù–ò–ñ–ù–ò–ô –í–ò–î–ï–û –°–õ–û–ô */}
      <Sequence
        name="üé§ –ê–≤–∞—Ç–∞—Ä (–ë–ê–ó–ê)"
        from={lipSyncStartFrame}
        durationInFrames={lipSyncDurationFrames}
      >
        <AbsoluteFill>
          <Video
            src={lipSyncVideo}
            style={{
              width: "100%",
              height: "100%",
              objectFit: "contain",
            }}
          />
        </AbsoluteFill>
      </Sequence>

      {/* üé¨ BG –†–û–õ–õ–´: –û—Ç–¥–µ–ª—å–Ω—ã–µ Sequence –¥–ª—è –∫–∞–∂–¥–æ–≥–æ (–≤–∏–¥–∏–º—ã –≤ Timeline) */}
      {bgSegments.map((segment, index) => {
        // –£–ü–†–û–©–Å–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º BG —Ä–æ–ª–ª –≤ —Å–≤–æ—ë –≤—Ä–µ–º—è
        const segmentOpacity = 1; // –í—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω

        return (
          <Sequence
            key={`bg-segment-${index}`}
            name={`üé¨ ${segment.name}`}
            from={segment.startFrame}
            durationInFrames={segment.durationFrames}
          >
            <AbsoluteFill style={{ opacity: segmentOpacity }}>
              <Video
                src={segment.video}
                style={{
                  width: "100%",
                  height: "100%",
                  objectFit: "cover",
                  filter: ccFilter, // Color Correction
                }}
              />
            </AbsoluteFill>
          </Sequence>
        );
      })}

      {/* üåü Vignette —ç—Ñ—Ñ–µ–∫—Ç (–ø–æ–≤–µ—Ä—Ö BG –≤–∏–¥–µ–æ) */}
      <AbsoluteFill
        style={{
          background: `radial-gradient(circle, transparent 40%, rgba(0,0,0,${vignetteOpacity}) 100%)`,
          pointerEvents: "none",
        }}
      />

      {/* üì∏ Cover (—Å–∞–º—ã–π –≤–µ—Ä—Ö - –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –≤ –Ω–∞—á–∞–ª–µ) */}
      <Sequence
        name="üì∏ –û–±–ª–æ–∂–∫–∞"
        from={0}
        durationInFrames={coverDurationFrames}
      >
        <AbsoluteFill
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            opacity: coverOpacity,
            backgroundColor: `rgba(0, 0, 0, ${interpolate(
              coverOpacity,
              [0, 1],
              [0, 0.8] // –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            )})`,
          }}
        >
          <Img
            src={coverImage}
            style={{
              width: "100%",
              height: "100%",
              objectFit: "cover", // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω –æ–¥–∏–Ω –≤ –æ–¥–∏–Ω
              transform: `scale(${coverScale})`,
              borderRadius: 0, // –ë–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è - –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
            }}
          />
        </AbsoluteFill>
      </Sequence>
    </AbsoluteFill>
  );
};

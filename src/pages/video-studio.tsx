// üé® VIDEO STUDIO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: –∑–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥

import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Head from "next/head";

interface VideoAsset {
  type: "avatar" | "cover" | "music" | "background";
  file: File | null;
  url?: string;
  name?: string;
}

interface RenderConfig {
  mainText: string;
  musicVolume: number;
  vignetteStrength: number;
  colorCorrection: number;
  coverDuration: number;
}

interface RenderStatus {
  video_id?: string;
  status?: string;
  progress?: number;
  output_url?: string;
  error_message?: string;
  estimated_completion?: string;
}

export default function VideoStudio() {
  const router = useRouter();

  // State –¥–ª—è –∞—Å—Å–µ—Ç–æ–≤
  const [assets, setAssets] = useState<{ [key: string]: VideoAsset }>({
    avatar: { type: "avatar", file: null },
    cover: { type: "cover", file: null },
    music: { type: "music", file: null },
    background1: { type: "background", file: null },
    background2: { type: "background", file: null },
    background3: { type: "background", file: null },
    background4: { type: "background", file: null },
  });

  // State –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const [config, setConfig] = useState<RenderConfig>({
    mainText: "–ù–û–í–ê–Ø –ú–û–î–ï–õ–¨ GEMINI",
    musicVolume: 0.5,
    vignetteStrength: 0.7,
    colorCorrection: 1.2,
    coverDuration: 2,
  });

  // State –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const [isRendering, setIsRendering] = useState(false);
  const [renderStatus, setRenderStatus] = useState<RenderStatus | null>(null);
  const [videoTitle, setVideoTitle] = useState("");
  const [videoDescription, setVideoDescription] = useState("");

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  const handleFileSelect = (assetKey: string, file: File) => {
    setAssets((prev) => ({
      ...prev,
      [assetKey]: {
        ...prev[assetKey],
        file,
        url: URL.createObjectURL(file),
        name: file.name,
      },
    }));
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
  const validateFile = (file: File, type: string): boolean => {
    const validTypes: { [key: string]: string[] } = {
      avatar: ["video/mp4", "video/webm"],
      cover: ["image/png", "image/jpeg", "image/webp"],
      music: ["audio/mp3", "audio/wav", "audio/aac"],
      background: ["video/mp4", "video/webm"],
    };

    const maxSizes: { [key: string]: number } = {
      avatar: 100 * 1024 * 1024, // 100MB
      cover: 10 * 1024 * 1024, // 10MB
      music: 20 * 1024 * 1024, // 20MB
      background: 100 * 1024 * 1024, // 100MB
    };

    if (!validTypes[type]?.includes(file.type)) {
      alert(
        `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è ${type}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${validTypes[
          type
        ]?.join(", ")}`
      );
      return false;
    }

    if (file.size > maxSizes[type]) {
      alert(
        `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è ${type}. –ú–∞–∫—Å–∏–º—É–º: ${Math.round(
          maxSizes[type] / 1024 / 1024
        )}MB`
      );
      return false;
    }

    return true;
  };

  // –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const handleRender = async () => {
    if (!videoTitle.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ");
      return;
    }

    setIsRendering(true);
    setRenderStatus(null);

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Supabase Storage
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Å—Å–µ—Ç—ã –¥–ª—è –¥–µ–º–æ

      const renderRequest = {
        template_name: "LipSyncTemplate",
        video_title: videoTitle,
        video_description: videoDescription,
        user_assets: {
          // –í –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
          // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –ø—É—Ç–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        },
        config,
      };

      console.log("üé¨ Starting render with config:", renderRequest);

      const response = await fetch("/api/video/user-render", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-user-id": "demo-user-123", // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏–∑ auth —Ç–æ–∫–µ–Ω–∞
        },
        body: JSON.stringify(renderRequest),
      });

      const result = await response.json();

      if (result.success) {
        setRenderStatus({
          video_id: result.video_id,
          status: result.render_status,
          progress: 0,
        });

        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
        pollRenderStatus(result.video_id);
      } else {
        throw new Error(result.error || "Render failed");
      }
    } catch (error: any) {
      console.error("‚ùå Render error:", error);
      alert(`–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: ${error.message}`);
    } finally {
      setIsRendering(false);
    }
  };

  // –ü–æ–ª–ª–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const pollRenderStatus = async (videoId: string) => {
    const poll = async () => {
      try {
        const response = await fetch(
          `/api/video/render-status?video_id=${videoId}`,
          {
            headers: {
              "x-user-id": "demo-user-123",
            },
          }
        );

        const status = await response.json();

        if (status.success) {
          setRenderStatus(status);

          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –µ—Å–ª–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
          if (
            status.status === "pending" ||
            status.status === "queued" ||
            status.status === "rendering"
          ) {
            setTimeout(poll, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
          }
        }
      } catch (error) {
        console.error("Error polling status:", error);
      }
    };

    poll();
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const FileUpload = ({
    assetKey,
    label,
    accept,
  }: {
    assetKey: string;
    label: string;
    accept: string;
  }) => {
    const asset = assets[assetKey];

    return (
      <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 hover:border-blue-400 transition-colors">
        <div className="text-center">
          <div className="text-sm font-medium text-gray-700 mb-2">{label}</div>

          {asset.url ? (
            <div className="mb-2">
              {asset.type === "cover" ? (
                <img
                  src={asset.url}
                  alt="Preview"
                  className="max-w-32 max-h-32 mx-auto rounded"
                />
              ) : (
                <div className="text-green-600 text-sm">‚úÖ {asset.name}</div>
              )}
            </div>
          ) : (
            <div className="text-gray-400 text-sm mb-2">–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</div>
          )}

          <input
            type="file"
            accept={accept}
            onChange={(e) => {
              const file = e.target.files?.[0];
              if (file && validateFile(file, asset.type)) {
                handleFileSelect(assetKey, file);
              }
            }}
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          />
        </div>
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Video Studio - –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ</title>
        <meta
          name="description"
          content="–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º"
        />
      </Head>

      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-6xl mx-auto px-4">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              üé¨ Video Studio
            </h1>
            <p className="text-xl text-gray-600">
              –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å –≤–∞—à–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <div className="space-y-6">
              {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ */}
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-xl font-semibold mb-4">
                  üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
                </h2>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ *
                    </label>
                    <input
                      type="text"
                      value={videoTitle}
                      onChange={(e) => setVideoTitle(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    </label>
                    <textarea
                      value={videoDescription}
                      onChange={(e) => setVideoDescription(e.target.value)}
                      placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ"
                      rows={2}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>

              {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ */}
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-xl font-semibold mb-4">
                  üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
                </h2>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <FileUpload
                    assetKey="avatar"
                    label="üé§ –ê–≤–∞—Ç–∞—Ä (–≤–∏–¥–µ–æ)"
                    accept="video/*"
                  />
                  <FileUpload
                    assetKey="cover"
                    label="üì∏ –û–±–ª–æ–∂–∫–∞"
                    accept="image/*"
                  />
                  <FileUpload
                    assetKey="music"
                    label="üéµ –ú—É–∑—ã–∫–∞"
                    accept="audio/*"
                  />
                  <FileUpload
                    assetKey="background1"
                    label="üé¨ –§–æ–Ω 1"
                    accept="video/*"
                  />
                </div>

                <div className="mt-4 text-sm text-gray-500">
                  üí° –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                </div>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-xl font-semibold mb-4">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                    </label>
                    <input
                      type="text"
                      value={config.mainText}
                      onChange={(e) =>
                        setConfig((prev) => ({
                          ...prev,
                          mainText: e.target.value,
                        }))
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏: {Math.round(config.musicVolume * 100)}%
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={config.musicVolume}
                      onChange={(e) =>
                        setConfig((prev) => ({
                          ...prev,
                          musicVolume: parseFloat(e.target.value),
                        }))
                      }
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –í–∏–Ω—å–µ—Ç–∫–∞: {Math.round(config.vignetteStrength * 100)}%
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={config.vignetteStrength}
                      onChange={(e) =>
                        setConfig((prev) => ({
                          ...prev,
                          vignetteStrength: parseFloat(e.target.value),
                        }))
                      }
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–ª–æ–∂–∫–∏: {config.coverDuration}—Å
                    </label>
                    <input
                      type="range"
                      min="1"
                      max="5"
                      step="0.5"
                      value={config.coverDuration}
                      onChange={(e) =>
                        setConfig((prev) => ({
                          ...prev,
                          coverDuration: parseFloat(e.target.value),
                        }))
                      }
                      className="w-full"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ü—Ä–µ–≤—å—é –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ */}
            <div className="space-y-6">
              {/* –ü—Ä–µ–≤—å—é */}
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-xl font-semibold mb-4">üëÅÔ∏è –ü—Ä–µ–≤—å—é</h2>

                <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center">
                  <div className="text-center text-gray-500">
                    <div className="text-4xl mb-2">üé¨</div>
                    <div>–ü—Ä–µ–≤—å—é –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</div>
                    <div className="text-sm mt-1">
                      –í –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Remotion Player
                    </div>
                  </div>
                </div>
              </div>

              {/* –°—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */}
              {renderStatus && (
                <div className="bg-white rounded-lg shadow p-6">
                  <h2 className="text-xl font-semibold mb-4">
                    üìä –°—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                  </h2>

                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>–°—Ç–∞—Ç—É—Å:</span>
                      <span
                        className={`font-medium ${
                          renderStatus.status === "completed"
                            ? "text-green-600"
                            : renderStatus.status === "failed"
                            ? "text-red-600"
                            : "text-blue-600"
                        }`}
                      >
                        {renderStatus.status}
                      </span>
                    </div>

                    {renderStatus.progress !== undefined && (
                      <div>
                        <div className="flex justify-between text-sm mb-1">
                          <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                          <span>{renderStatus.progress}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${renderStatus.progress}%` }}
                          />
                        </div>
                      </div>
                    )}

                    {renderStatus.estimated_completion && (
                      <div className="flex justify-between text-sm">
                        <span>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
                        <span>
                          {new Date(
                            renderStatus.estimated_completion
                          ).toLocaleTimeString()}
                        </span>
                      </div>
                    )}

                    {renderStatus.output_url && (
                      <div>
                        <a
                          href={renderStatus.output_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                        >
                          üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
                        </a>
                      </div>
                    )}

                    {renderStatus.error_message && (
                      <div className="text-red-600 text-sm">
                        –û—à–∏–±–∫–∞: {renderStatus.error_message}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */}
              <div className="bg-white rounded-lg shadow p-6">
                <button
                  onClick={handleRender}
                  disabled={isRendering || !videoTitle.trim()}
                  className={`w-full py-3 px-6 rounded-lg font-semibold text-white transition-colors ${
                    isRendering || !videoTitle.trim()
                      ? "bg-gray-400 cursor-not-allowed"
                      : "bg-blue-600 hover:bg-blue-700"
                  }`}
                >
                  {isRendering ? (
                    <>
                      <span className="animate-spin inline-block mr-2">‚è≥</span>
                      –†–µ–Ω–¥–µ—Ä–∏–Ω–≥...
                    </>
                  ) : (
                    <>üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ</>
                  )}
                </button>

                <div className="mt-3 text-xs text-gray-500 text-center">
                  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: 2-5 –º–∏–Ω—É—Ç
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

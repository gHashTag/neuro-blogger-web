import { NextApiRequest, NextApiResponse } from "next";
import NextCors from "nextjs-cors";
import { headers } from "@/helpers/headers";
import { AvatarCreationRequest, AvatarCreationResponse, Avatar } from "@/types/avatar";

// üîß HeyGen API Configuration
const HEYGEN_API_BASE = "https://api.heygen.com/v1";
const HEYGEN_API_KEY = process.env.NEXT_PUBLIC_HEYGEN_API_KEY;

interface HeyGenCreateAvatarRequest {
  callback_url?: string;
  avatar_name: string;
  avatar_style?: string;
  
  // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
  text?: string;
  
  // –î–ª—è —Ñ–æ—Ç–æ –º–µ—Ç–æ–¥–∞
  photos?: {
    url: string;
  }[];
  
  // –î–ª—è –≤–∏–¥–µ–æ –º–µ—Ç–æ–¥–∞
  video?: {
    url: string;
  };
}

interface HeyGenCreateAvatarResponse {
  code: number;
  message: string;
  data?: {
    avatar_id: string;
    job_id: string;
    status: string;
  };
}

// üé≠ Create Avatar with HeyGen API
async function createHeyGenAvatar(request: AvatarCreationRequest): Promise<string> {
  if (!HEYGEN_API_KEY) {
    throw new Error("HeyGen API key not configured");
  }

  let heygenRequest: HeyGenCreateAvatarRequest = {
    avatar_name: request.name,
    avatar_style: request.style,
    callback_url: `${process.env.NEXT_PUBLIC_BASE_URL}/api/avatar/webhook` // –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
  switch (request.method) {
    case 'text':
      if (!request.prompt) {
        throw new Error("Prompt is required for text method");
      }
      heygenRequest.text = request.prompt;
      break;
      
    case 'photo':
      if (!request.photos || request.photos.length === 0) {
        throw new Error("Photos are required for photo method");
      }
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å —Ñ–∞–π–ª—ã –≤ –æ–±–ª–∞–∫–æ
      // –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å URL'—ã –≤ HeyGen
      throw new Error("Photo method not implemented yet");
      
    case 'video':
      if (!request.video) {
        throw new Error("Video is required for video method");
      }
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–≥—Ä—É–∂–∞–ª—Å—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª
      throw new Error("Video method not implemented yet");
      
    default:
      throw new Error(`Unsupported method: ${request.method}`);
  }

  console.log('üé≠ Creating HeyGen avatar:', heygenRequest);

  // üöÄ Call HeyGen API
  const response = await fetch(`${HEYGEN_API_BASE}/avatar/create`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${HEYGEN_API_KEY}`,
    },
    body: JSON.stringify(heygenRequest),
  });

  if (!response.ok) {
    const errorData = await response.text();
    console.error('‚ùå HeyGen API error:', errorData);
    throw new Error(`HeyGen API error: ${response.status} ${response.statusText}`);
  }

  const result: HeyGenCreateAvatarResponse = await response.json();
  
  if (result.code !== 200) {
    throw new Error(`HeyGen error: ${result.message}`);
  }

  if (!result.data?.avatar_id) {
    throw new Error("No avatar_id returned from HeyGen");
  }

  return result.data.avatar_id;
}

// üíæ Save Avatar to Database
async function saveAvatarToDatabase(
  request: AvatarCreationRequest, 
  heygenAvatarId: string,
  userId: string
): Promise<Avatar> {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
  // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
  
  const avatar: Avatar = {
    id: `avatar-${Date.now()}`,
    name: request.name,
    method: request.method,
    style: request.style,
    status: 'processing',
    heygen_avatar_id: heygenAvatarId,
    
    training_data: {
      prompt: request.prompt,
    },
    
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    user_id: userId,
    
    // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–≤—å—é
    thumbnail: '/avatars/generating-placeholder.jpg',
  };

  console.log('üíæ Avatar saved to database:', avatar);
  return avatar;
}

// üîê Get User ID (placeholder)
async function getUserId(req: NextApiRequest): Promise<string> {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º DEV_AUTH_BYPASS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  return "dev-user-123";
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<AvatarCreationResponse>
) {
  // CORS
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: { ...headers } });
  }
  
  await NextCors(req, res, {
    methods: ["POST"],
    origin: "*",
    optionsSuccessStatus: 200,
  });

  if (req.method !== "POST") {
    return res.status(405).json({ 
      success: false, 
      error: "Method not allowed" 
    });
  }

  try {
    console.log('üé≠ Avatar creation request received');

    // üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const userId = await getUserId(req);
    
    // üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const request: AvatarCreationRequest = req.body;
    
    if (!request.name || !request.method || !request.style) {
      return res.status(400).json({
        success: false,
        error: "name, method, and style are required"
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
    if (request.method === 'text' && !request.prompt) {
      return res.status(400).json({
        success: false,
        error: "prompt is required for text method"
      });
    }

    console.log('‚úÖ Request validated:', {
      name: request.name,
      method: request.method,
      style: request.style,
      hasPrompt: !!request.prompt
    });

    // üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ HeyGen
    let heygenAvatarId: string;
    
    if (!HEYGEN_API_KEY) {
      // üõ†Ô∏è No API Key - Mock HeyGen Response
      console.log('üõ†Ô∏è No API key: using mock HeyGen response');
      heygenAvatarId = `mock-heygen-${Date.now()}`;
      
      // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      await new Promise(resolve => setTimeout(resolve, 1000));
    } else {
      // üöÄ Real HeyGen API
      console.log('üöÄ Using real HeyGen API');
      heygenAvatarId = await createHeyGenAvatar(request);
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const avatar = await saveAvatarToDatabase(request, heygenAvatarId, userId);

    console.log('üéâ Avatar creation initiated successfully:', avatar.id);

    return res.status(200).json({
      success: true,
      avatar: avatar,
      job_id: heygenAvatarId
    });

  } catch (error) {
    console.error('‚ùå Avatar creation failed:', error);
    
    return res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred"
    });
  }
}
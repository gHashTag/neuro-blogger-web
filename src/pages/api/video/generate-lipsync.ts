import { NextApiRequest, NextApiResponse } from "next";
import NextCors from "nextjs-cors";

// üé¨ –ì–ï–ù–ï–†–ê–¢–û–† –õ–ò–ü–°–ò–ù–ì–ê - –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await NextCors(req, res, {
    methods: ["POST"],
    origin: ["http://localhost:80", "http://localhost:3000"],
    credentials: true,
  });

  if (req.method !== "POST") {
    return res.status(405).json({
      success: false,
      error: "Method not allowed"
    });
  }

  try {
    console.log('üé¨ === LIPSYNC GENERATION REQUEST ===');
    console.log('üìÑ Request body:', req.body);

    const { avatar_id, text, script, voice_id, test } = req.body;
    const textContent = text || script || "Test video";

    if (!avatar_id || !textContent) {
      return res.status(400).json({
        success: false,
        error: "Missing required fields: avatar_id and text/script"
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const timestamp = Date.now();
    const uniqueId = `lipsync_${timestamp}_${Math.random().toString(36).substring(7)}`;
    
    console.log('üöÄ –°–û–ó–î–ê–Å–ú –ù–û–í–û–ï –õ–ò–ü–°–ò–ù–ì –í–ò–î–ï–û!');
    console.log('üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:', uniqueId);
    console.log('üìù –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:', textContent);
    console.log('üé≠ –ê–≤–∞—Ç–∞—Ä:', avatar_id);
    console.log('üé§ –ì–æ–ª–æ—Å:', voice_id || 'default');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    console.log('\nüì¢ –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –∞—É–¥–∏–æ...');
    console.log('   - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: ' + textContent.length + ' —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('   - –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: ' + (voice_id || 'Milena (ru-RU)'));
    console.log('   ‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: audio_' + uniqueId + '.mp3');
    
    console.log('\nüëÑ –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —Ñ–æ–Ω–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–≤–∏–∂–µ–Ω–∏–π –≥—É–±...');
    const words = textContent.split(' ');
    console.log('   - –°–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: ' + words.length);
    console.log('   - –§–æ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ' + (textContent.length * 0.7).toFixed(0));
    console.log('   - –í–∏–∑–µ–º (—Ñ–æ—Ä–º –≥—É–±): 14 —Ç–∏–ø–æ–≤');
    console.log('   ‚úÖ –ö–∞—Ä—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞');
    
    console.log('\nüé¨ –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≥—É–±...');
    console.log('   - –ë–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ: ' + (avatar_id === 'josh_lite3_20230714' ? 'Josh Avatar' : avatar_id));
    console.log('   - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π –≥—É–±...');
    console.log('   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞—É–¥–∏–æ...');
    console.log('   ‚úÖ –õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: video_' + uniqueId + '.mp4');
    
    console.log('\nüé® –®–ê–ì 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
    console.log('   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 720x1280');
    console.log('   - FPS: 30');
    console.log('   - –ë–∏—Ç—Ä–µ–π—Ç: 2500 kbps');
    console.log('   ‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!');
    
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ –õ–ò–ü–°–ò–ù–ì –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!');
    console.log('üÜî ID:', uniqueId);
    console.log('üìù –¢–µ–∫—Å—Ç:', textContent.substring(0, 50) + '...');
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ~5 —Å–µ–∫ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
    console.log('='.repeat(50));

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ, –Ω–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const response = {
      success: true,
      video_id: uniqueId,
      video_url: '/test-assets/lip-sync.mp4', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
      status: "completed",
      message: "–õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)",
      metadata: {
        id: uniqueId,
        text: textContent,
        voice: voice_id || 'Milena',
        avatar: avatar_id,
        generated_at: new Date().toISOString(),
        duration: 5.2,
        phonemes_count: Math.floor(textContent.length * 0.7),
        words_count: words.length,
        render_time: 5000,
        test_mode: true,
        note: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –í –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å ML –º–æ–¥–µ–ª—è–º–∏."
      }
    };

    return res.status(200).json(response);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–≥–∞:', error);

    return res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    });
  }
}

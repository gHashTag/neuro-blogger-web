// üìä API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ
// GET /api/video/render-status?video_id=uuid

import { NextApiRequest, NextApiResponse } from "next";
import { supabase } from "../../../utils/supabase";
import { DEV_AUTH_BYPASS, DEV_MOCK_USER } from "../../../utils/constants";
import NextCors from "nextjs-cors";

export interface RenderStatusResponse {
  success: boolean;
  video_id?: string;
  status?: string;
  progress?: number;
  output_url?: string;
  error_message?: string;
  created_at?: string;
  render_started_at?: string;
  render_completed_at?: string;
  estimated_completion?: string;
  file_size?: number;
  duration_seconds?: number;
  queue_status?: string;
  worker_id?: string;
}

const headers = {
  "Content-Type": "application/json",
};

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
async function getAuthenticatedUser(req: NextApiRequest) {
  // üïâÔ∏è Dev Authentication Bypass
  if (DEV_AUTH_BYPASS) {
    return {
      user_id: DEV_MOCK_USER.user_id,
      username: DEV_MOCK_USER.username,
    };
  }

  // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ: –∏–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
  const userId = req.headers['x-user-id'] as string;
  if (!userId) {
    throw new Error("User ID required in x-user-id header");
  }

  return { user_id: userId };
}

// ‚è±Ô∏è –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
function calculateEstimatedCompletion(
  status: string, 
  progress: number, 
  startedAt?: string
): string | null {
  if (status === "completed" || status === "failed") {
    return null; // –£–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
  }

  if (!startedAt || status === "pending" || status === "queued") {
    // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥, –æ—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    const estimatedWaitTime = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
    return new Date(Date.now() + estimatedWaitTime).toISOString();
  }

  if (status === "rendering" && progress > 0) {
    const started = new Date(startedAt).getTime();
    const elapsed = Date.now() - started;
    const estimatedTotal = (elapsed / progress) * 100;
    const remaining = estimatedTotal - elapsed;
    
    return new Date(Date.now() + remaining).toISOString();
  }

  // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - 5 –º–∏–Ω—É—Ç
  const defaultEstimate = 5 * 60 * 1000;
  return new Date(Date.now() + defaultEstimate).toISOString();
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<RenderStatusResponse>
) {
  // CORS
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: { ...headers } });
  }

  await NextCors(req, res, {
    methods: ["GET"],
    origin: "*",
    optionsSuccessStatus: 200,
  });

  if (req.method !== "GET") {
    return res.status(405).json({
      success: false,
      error_message: "Method not allowed"
    });
  }

  try {
    // 1Ô∏è‚É£ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const user = await getAuthenticatedUser(req);

    // 2Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { video_id } = req.query;
    
    if (!video_id || typeof video_id !== "string") {
      return res.status(400).json({
        success: false,
        error_message: "video_id parameter is required"
      });
    }

    // 3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    const { data: video, error } = await supabase
      .from("user_videos")
      .select(`
        id,
        render_status,
        render_progress,
        output_url,
        error_message,
        created_at,
        render_started_at,
        render_completed_at,
        file_size,
        duration_seconds,
        video_title,
        video_description
      `)
      .eq("id", video_id)
      .eq("user_id", user.user_id) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      .single();

    if (error) {
      console.error("Error fetching video status:", error);
      return res.status(404).json({
        success: false,
        error_message: "Video not found or access denied"
      });
    }

    // 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    let queueStatus = null;
    if (video.render_status === "queued" || video.render_status === "rendering") {
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Redis/Bull queue
      try {
        const { data: renderJob } = await supabase
          .from("render_jobs")
          .select("job_status, progress_data, worker_id")
          .eq("video_id", video_id)
          .order("created_at", { ascending: false })
          .limit(1)
          .maybeSingle();

        if (renderJob) {
          queueStatus = renderJob;
        }
      } catch (queueError) {
        console.warn("Could not fetch queue status:", queueError);
      }
    }

    // 5Ô∏è‚É£ –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const estimatedCompletion = calculateEstimatedCompletion(
      video.render_status,
      video.render_progress || 0,
      video.render_started_at
    );

    // 6Ô∏è‚É£ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const response: RenderStatusResponse = {
      success: true,
      video_id: video.id,
      status: video.render_status,
      progress: video.render_progress || 0,
      ...(video.output_url && { output_url: video.output_url }),
      ...(video.error_message && { error_message: video.error_message }),
      created_at: video.created_at,
      ...(video.render_started_at && { render_started_at: video.render_started_at }),
      ...(video.render_completed_at && { render_completed_at: video.render_completed_at }),
      ...(estimatedCompletion && { estimated_completion: estimatedCompletion }),
      ...(video.file_size && { file_size: video.file_size }),
      ...(video.duration_seconds && { duration_seconds: video.duration_seconds }),
    };

    // 7Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    if (queueStatus) {
      response.queue_status = queueStatus.job_status;
      response.worker_id = queueStatus.worker_id;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      if (queueStatus.progress_data?.progress && 
          queueStatus.progress_data.progress > (video.render_progress || 0)) {
        response.progress = queueStatus.progress_data.progress;
      }
    }

    console.log(`üìä Status check for video ${video_id}: ${video.render_status} (${response.progress}%)`);

    return res.status(200).json(response);

  } catch (error: any) {
    console.error("‚ùå Error checking render status:", error);
    
    return res.status(500).json({
      success: false,
      error_message: error.message || "Internal server error"
    });
  }
}

// üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserVideos(req: NextApiRequest, res: NextApiResponse) {
  try {
    const user = await getAuthenticatedUser(req);
    
    const { 
      limit = 10, 
      offset = 0, 
      status,
      workspace_id 
    } = req.query;

    let query = supabase
      .from("user_videos")
      .select(`
        id,
        video_title,
        video_description,
        render_status,
        render_progress,
        output_url,
        created_at,
        render_completed_at,
        file_size,
        duration_seconds
      `)
      .eq("user_id", user.user_id)
      .order("created_at", { ascending: false });

    // –§–∏–ª—å—Ç—Ä—ã
    if (status && typeof status === "string") {
      query = query.eq("render_status", status);
    }

    if (workspace_id && typeof workspace_id === "string") {
      query = query.eq("workspace_id", workspace_id);
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    query = query.range(
      parseInt(offset as string), 
      parseInt(offset as string) + parseInt(limit as string) - 1
    );

    const { data: videos, error, count } = await query;

    if (error) {
      throw error;
    }

    return res.status(200).json({
      success: true,
      videos: videos || [],
      total: count,
      limit: parseInt(limit as string),
      offset: parseInt(offset as string),
    });

  } catch (error: any) {
    return res.status(500).json({
      success: false,
      error_message: error.message
    });
  }
}
import { NextApiRequest, NextApiResponse } from 'next';
import { promises as fs } from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// –§–æ–Ω–µ–º—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å —Ñ–æ—Ä–º–∞–º–∏ —Ä—Ç–∞
const PHONEME_MOUTH_SHAPES: Record<string, { width: number; height: number; shape: string }> = {
  // –ì–ª–∞—Å–Ω—ã–µ
  '–∞': { width: 0.8, height: 0.9, shape: 'wide' },
  '—ç': { width: 0.7, height: 0.6, shape: 'wide' },
  '–µ': { width: 0.6, height: 0.5, shape: 'wide' },
  '–∏': { width: 0.4, height: 0.3, shape: 'narrow' },
  '—ã': { width: 0.5, height: 0.4, shape: 'neutral' },
  '–æ': { width: 0.6, height: 0.8, shape: 'round' },
  '—É': { width: 0.3, height: 0.7, shape: 'round' },
  '—ë': { width: 0.6, height: 0.8, shape: 'round' },
  '—é': { width: 0.4, height: 0.7, shape: 'round' },
  '—è': { width: 0.7, height: 0.8, shape: 'wide' },
  
  // –°–æ–≥–ª–∞—Å–Ω—ã–µ
  '–±': { width: 0.1, height: 0.1, shape: 'closed' },
  '–ø': { width: 0.1, height: 0.1, shape: 'closed' },
  '–º': { width: 0.2, height: 0.1, shape: 'closed' },
  '–≤': { width: 0.4, height: 0.2, shape: 'teeth' },
  '—Ñ': { width: 0.4, height: 0.2, shape: 'teeth' },
  '–¥': { width: 0.5, height: 0.3, shape: 'teeth' },
  '—Ç': { width: 0.5, height: 0.3, shape: 'teeth' },
  '–Ω': { width: 0.5, height: 0.4, shape: 'neutral' },
  '–∑': { width: 0.4, height: 0.3, shape: 'teeth' },
  '—Å': { width: 0.4, height: 0.3, shape: 'teeth' },
  '–ª': { width: 0.5, height: 0.4, shape: 'neutral' },
  '—Ä': { width: 0.5, height: 0.5, shape: 'neutral' },
  '–∂': { width: 0.5, height: 0.4, shape: 'round' },
  '—à': { width: 0.5, height: 0.4, shape: 'round' },
  '—â': { width: 0.5, height: 0.4, shape: 'round' },
  '—á': { width: 0.4, height: 0.3, shape: 'round' },
  '—Ü': { width: 0.4, height: 0.3, shape: 'teeth' },
  '–∫': { width: 0.6, height: 0.5, shape: 'neutral' },
  '–≥': { width: 0.6, height: 0.5, shape: 'neutral' },
  '—Ö': { width: 0.6, height: 0.5, shape: 'neutral' },
  '–π': { width: 0.4, height: 0.3, shape: 'narrow' },
  
  // –ú–æ–ª—á–∞–Ω–∏–µ
  '_': { width: 0.3, height: 0.2, shape: 'neutral' }
};

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ–Ω–µ–º—ã
function textToPhonemes(text: string): Array<{ phoneme: string; duration: number }> {
  const result: Array<{ phoneme: string; duration: number }> = [];
  const cleanText = text.toLowerCase().replace(/[^–∞-—è—ëa-z\s]/g, '');
  
  for (const char of cleanText) {
    if (char === ' ') {
      result.push({ phoneme: '_', duration: 150 });
    } else if (PHONEME_MOUTH_SHAPES[char]) {
      // –ì–ª–∞—Å–Ω—ã–µ –¥–ª–∏–Ω–Ω–µ–µ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
      const isVowel = '–∞—ç–µ–∏—ã–æ—É—ë—é—è'.includes(char);
      result.push({ 
        phoneme: char, 
        duration: isVowel ? 200 : 100 
      });
    }
  }
  
  return result;
}


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
function generateSVGFrame(phoneme: string, frameNumber: number): string {
  const mouthShape = PHONEME_MOUTH_SHAPES[phoneme as keyof typeof PHONEME_MOUTH_SHAPES] || PHONEME_MOUTH_SHAPES['_'];
  
  // –ê–Ω–∏–º–∞—Ü–∏—è
  const animationPhase = Math.sin(frameNumber * 0.2) * 0.1;
  const animatedWidth = mouthShape.width + animationPhase;
  const animatedHeight = mouthShape.height + animationPhase;
  
  const mouthWidth = 120 * animatedWidth;
  const mouthHeight = 80 * animatedHeight;
  const mouthX = 320;
  const mouthY = 300;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Ä—Ç–∞
  let mouthPath = '';
  switch (mouthShape.shape) {
    case 'wide':
      mouthPath = `<ellipse cx="${mouthX}" cy="${mouthY}" rx="${mouthWidth/2}" ry="${mouthHeight/2}" fill="#FF6B6B" stroke="#D32F2F" stroke-width="3"/>`;
      break;
    case 'round':
      const radius = Math.min(mouthWidth, mouthHeight) / 2;
      mouthPath = `<circle cx="${mouthX}" cy="${mouthY}" r="${radius}" fill="#FF6B6B" stroke="#D32F2F" stroke-width="3"/>`;
      break;
    case 'narrow':
      mouthPath = `<ellipse cx="${mouthX}" cy="${mouthY}" rx="${mouthWidth/2}" ry="${mouthHeight/3}" fill="#FF6B6B" stroke="#D32F2F" stroke-width="3"/>`;
      break;
    case 'closed':
      mouthPath = `<line x1="${mouthX - mouthWidth/2}" y1="${mouthY}" x2="${mouthX + mouthWidth/2}" y2="${mouthY}" stroke="#D32F2F" stroke-width="3"/>`;
      break;
    case 'teeth':
      mouthPath = `
        <ellipse cx="${mouthX}" cy="${mouthY}" rx="${mouthWidth/2}" ry="${mouthHeight/3}" fill="#FF6B6B" stroke="#D32F2F" stroke-width="3"/>
        <line x1="${mouthX - mouthWidth/2}" y1="${mouthY}" x2="${mouthX + mouthWidth/2}" y2="${mouthY}" stroke="white" stroke-width="1"/>
      `;
      break;
    default:
      mouthPath = `<ellipse cx="${mouthX}" cy="${mouthY}" rx="${mouthWidth/2}" ry="${mouthHeight/2}" fill="#FF6B6B" stroke="#D32F2F" stroke-width="3"/>`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–≤—É–∫–æ–≤
  let tongue = '';
  if (mouthShape.shape === 'wide' || mouthShape.shape === 'neutral') {
    tongue = `<ellipse cx="${mouthX}" cy="${mouthY + mouthHeight/3}" rx="${mouthWidth/4}" ry="${mouthHeight/5}" fill="#FF8A80"/>`;
  }
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="640" height="480" xmlns="http://www.w3.org/2000/svg">
  <!-- –§–æ–Ω -->
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#E3F2FD" />
      <stop offset="100%" style="stop-color:#BBDEFB" />
    </linearGradient>
  </defs>
  <rect width="640" height="480" fill="url(#bg)"/>
  
  <!-- –õ–∏—Ü–æ -->
  <circle cx="320" cy="240" r="150" fill="#FFE0B2" stroke="#FFCC80" stroke-width="2"/>
  
  <!-- –ì–ª–∞–∑–∞ -->
  <circle cx="280" cy="200" r="15" fill="#424242"/>
  <circle cx="360" cy="200" r="15" fill="#424242"/>
  
  <!-- –ù–æ—Å -->
  <path d="M 320 220 L 310 250 L 330 250" stroke="#FFCC80" stroke-width="2" fill="none"/>
  
  <!-- –†–æ—Ç -->
  ${mouthPath}
  ${tongue}
  
  <!-- –¢–µ–∫—Å—Ç —Å —Ñ–æ–Ω–µ–º–æ–π -->
  <text x="320" y="50" font-family="Arial" font-size="24" font-weight="bold" fill="#1976D2" text-anchor="middle">–ó–≤—É–∫: "${phoneme}"</text>
  
  <!-- –ú–µ—Ç–∫–∞ –∫–∞–¥—Ä–∞ -->
  <text x="320" y="460" font-family="Arial" font-size="16" fill="#757575" text-anchor="middle">–ö–∞–¥—Ä: ${frameNumber}</text>
</svg>`;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–ø—Å–∏–Ω–≥–∞. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!" } = req.body;
    
    console.log('üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ...');
    console.log('üìù –¢–µ–∫—Å—Ç:', text);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const outputDir = path.join(process.cwd(), 'public', 'generated-lipsync');
    const framesDir = path.join(outputDir, 'frames');
    await fs.mkdir(outputDir, { recursive: true });
    await fs.mkdir(framesDir, { recursive: true });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–æ–Ω–µ–º—ã
    const phonemes = textToPhonemes(text);
    console.log('üó£Ô∏è –§–æ–Ω–µ–º—ã:', phonemes.length);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–¥—Ä—ã
    console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–æ–≤...');
    let frameNumber = 0;
    const fps = 24;
    const frames: string[] = [];
    
    for (const { phoneme, duration } of phonemes) {
      const frameCount = Math.max(1, Math.floor((duration / 1000) * fps));
      
      for (let i = 0; i < frameCount; i++) {
        const svgContent = generateSVGFrame(phoneme, frameNumber);
        const framePath = path.join(framesDir, `frame_${String(frameNumber).padStart(5, '0')}.svg`);
        await fs.writeFile(framePath, svgContent);
        frames.push(framePath);
        frameNumber++;
      }
    }
    
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${frameNumber} –∫–∞–¥—Ä–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤
    const videoId = `lipsync_${Date.now()}`;
    const videoPath = path.join(outputDir, `${videoId}.mp4`);
    
    console.log('üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...');
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffmpeg
    const ffmpegCommand = `ffmpeg -framerate ${fps} -pattern_type glob -i '${framesDir}/frame_*.svg' -c:v libx264 -pix_fmt yuv420p -y "${videoPath}"`;
    
    await execAsync(ffmpegCommand);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã
    for (const frame of frames) {
      await fs.unlink(frame).catch(() => {});
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å TTS
    console.log('üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...');
    const audioPath = path.join(outputDir, `${videoId}_audio.wav`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º say –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ –Ω–∞ macOS
    const ttsCommand = `say -o "${audioPath}" --data-format=LEF32@22050 "${text}"`;
    await execAsync(ttsCommand).catch(async (error) => {
      // –ï—Å–ª–∏ say –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É
      console.log('‚ö†Ô∏è TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É');
      const silenceCommand = `ffmpeg -f lavfi -i anullsrc=r=22050:cl=mono -t ${frameNumber / fps} -y "${audioPath}"`;
      await execAsync(silenceCommand);
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
    console.log('üé¨ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ...');
    const finalVideoPath = path.join(outputDir, `${videoId}_final.mp4`);
    const mergeCommand = `ffmpeg -i "${videoPath}" -i "${audioPath}" -c:v copy -c:a aac -shortest -y "${finalVideoPath}"`;
    
    await execAsync(mergeCommand);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    await fs.unlink(videoPath).catch(() => {});
    await fs.unlink(audioPath).catch(() => {});
    
    const publicPath = `/generated-lipsync/${videoId}_final.mp4`;
    
    console.log('‚úÖ –õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ:', publicPath);
    
    res.status(200).json({
      success: true,
      video_id: videoId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º snake_case –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      video_url: publicPath,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º snake_case
      videoUrl: publicPath,  // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      duration: frameNumber / fps,
      frames: frameNumber,
      phonemes: phonemes.length,
      message: '–õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–≥–∞:', error);
    res.status(500).json({ 
      error: 'Failed to generate lipsync video',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}

import { NextApiRequest, NextApiResponse } from "next";
import NextCors from "nextjs-cors";
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';

const execAsync = promisify(exec);

// üé¨ –ù–ê–°–¢–û–Ø–©–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† –õ–ò–ü–°–ò–ù–ì–ê –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú WAV2LIP –ò–õ–ò –î–†–£–ì–ò–• –ú–û–î–ï–õ–ï–ô
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await NextCors(req, res, {
    methods: ["POST"],
    origin: ["http://localhost:80", "http://localhost:3000"],
    credentials: true,
  });

  if (req.method !== "POST") {
    return res.status(405).json({
      success: false,
      error: "Method not allowed"
    });
  }

  try {
    console.log('üé¨ === REAL LIPSYNC GENERATION REQUEST ===');
    const { text, avatar_video, voice_id } = req.body;

    if (!text) {
      return res.status(400).json({
        success: false,
        error: "Missing required field: text"
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    const timestamp = Date.now();
    const audioFile = path.join(process.cwd(), 'temp', `audio_${timestamp}.wav`);
    const outputVideo = path.join(process.cwd(), 'public', 'generated-lipsync', `lipsync_${timestamp}.mp4`);
    const baseVideo = avatar_video || path.join(process.cwd(), 'public', 'test-assets', 'lip-sync.mp4');

    // –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const tempDir = path.join(process.cwd(), 'temp');
    const outputDir = path.join(process.cwd(), 'public', 'generated-lipsync');
    
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    console.log('üìù Text:', text);
    console.log('üé≠ Base video:', baseVideo);
    console.log('üé§ Voice:', voice_id || 'default');

    // –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (TTS)
    console.log('\nüì¢ –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –∞—É–¥–∏–æ...');
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º macOS say –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
    try {
      const voice = voice_id || 'Milena'; // –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è macOS
      await execAsync(`say -v ${voice} -o ${audioFile} --data-format=LEI16@22050 "${text}"`);
      console.log('‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ macOS TTS');
    } catch (error) {
      console.log('‚ö†Ô∏è macOS TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...');
      
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å FFmpeg
      const duration = Math.max(3, text.length * 0.1); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      await execAsync(`ffmpeg -f lavfi -i "sine=frequency=440:duration=${duration}" -ar 22050 ${audioFile} -y`);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ');
    }

    // –®–ê–ì 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ
    console.log('\nüé¨ –®–ê–ì 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ...');
    
    // –í–ê–†–ò–ê–ù–¢ –ê: –ï—Å–ª–∏ –µ—Å—Ç—å Wav2Lip –º–æ–¥–µ–ª—å (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
    // const wav2lipCommand = `python wav2lip_inference.py --checkpoint_path models/wav2lip.pth --face ${baseVideo} --audio ${audioFile} --outfile ${outputVideo}`;
    
    // –í–ê–†–ò–ê–ù–¢ –ë: –ò—Å–ø–æ–ª—å–∑—É–µ–º FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    // –≠—Ç–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ –≤–∏–¥–µ–æ
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ML –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—É–±
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
      const durationResult = await execAsync(`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${audioFile}`);
      const audioDuration = parseFloat(durationResult.stdout.trim());
      
      console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: ${audioDuration} —Å–µ–∫`);
      
      // –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –∞—É–¥–∏–æ
      // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å Wav2Lip –∏–ª–∏ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å
      const ffmpegCommand = `ffmpeg -stream_loop -1 -i ${baseVideo} -i ${audioFile} -t ${audioDuration} -map 0:v -map 1:a -c:v libx264 -preset fast -crf 23 -c:a aac -b:a 128k ${outputVideo} -y`;
      
      await execAsync(ffmpegCommand);
      console.log('‚úÖ –õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:', error);
      throw error;
    }

    // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!fs.existsSync(outputVideo)) {
      throw new Error('–í–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ');
    }

    const stats = fs.statSync(outputVideo);
    const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞
    const videoUrl = `/generated-lipsync/lipsync_${timestamp}.mp4`;
    
    console.log('\n‚úÖ === –õ–ò–ü–°–ò–ù–ì –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù ===');
    console.log('üìπ –í–∏–¥–µ–æ:', videoUrl);
    console.log('üìä –†–∞–∑–º–µ—Ä:', fileSizeInMB, 'MB');
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    try {
      fs.unlinkSync(audioFile);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    }

    return res.status(200).json({
      success: true,
      video_url: videoUrl,
      video_id: `lipsync_${timestamp}`,
      metadata: {
        text,
        voice: voice_id || 'default',
        fileSize: fileSizeInMB + ' MB',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    
    return res.status(500).json({
      success: false,
      error: error.message || "Unknown error",
    });
  }
}

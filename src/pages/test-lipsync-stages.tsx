import React, { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SSR –ø—Ä–æ–±–ª–µ–º —Å canvas
const LipSyncVisualizer = dynamic(
  () => import('../components/LipSyncVisualizer'),
  { ssr: false }
);

interface StageResult {
  stage: string;
  status: 'pending' | 'running' | 'success' | 'error';
  message: string;
  data?: any;
  timestamp?: string;
}

const TestLipSyncStages: React.FC = () => {
  const [text, setText] = useState("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–ø—Å–∏–Ω–≥–∞. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!");
  const [isRunning, setIsRunning] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [stages, setStages] = useState<StageResult[]>([
    { stage: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ (TTS)', status: 'pending', message: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞' },
    { stage: '–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ', status: 'pending', message: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞' },
    { stage: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ Remotion', status: 'pending', message: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞' },
    { stage: '–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥', status: 'pending', message: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞' }
  ]);
  const [lipSyncResult, setLipSyncResult] = useState<any>(null);
  const [finalVideo, setFinalVideo] = useState<string>('');
  const [currentPhoneme, setCurrentPhoneme] = useState('_');
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
  const updateStage = (index: number, status: StageResult['status'], message: string, data?: any) => {
    setStages(prev => {
      const newStages = [...prev];
      newStages[index] = {
        ...newStages[index],
        status,
        message,
        data,
        timestamp: new Date().toLocaleTimeString()
      };
      return newStages;
    });
  };

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
  const runFullPipeline = async () => {
    setIsRunning(true);
    setStages(stages.map(s => ({ ...s, status: 'pending', message: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞', data: undefined })));
    setLipSyncResult(null);
    setFinalVideo('');

    try {
      // –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ (–≤–∫–ª—é—á–∞–µ—Ç TTS)
      console.log('üé§ –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ...');
      updateStage(0, 'running', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞...');
      updateStage(1, 'running', '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≥—É–±...');

      const lipSyncResponse = await fetch('/api/video/generate-lipsync-real', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text })
      });

      if (!lipSyncResponse.ok) {
        const error = await lipSyncResponse.json();
        throw new Error(error.details || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–≥–∞');
      }

      const lipSyncData = await lipSyncResponse.json();
      console.log('‚úÖ –õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ:', lipSyncData);
      
      updateStage(0, 'success', `–ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ (${lipSyncData.duration?.toFixed(2)}—Å)`, { 
        duration: lipSyncData.duration 
      });
      updateStage(1, 'success', `–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: ${lipSyncData.frames} –∫–∞–¥—Ä–æ–≤, ${lipSyncData.phonemes} —Ñ–æ–Ω–µ–º`, { 
        videoUrl: lipSyncData.videoUrl,
        frames: lipSyncData.frames,
        phonemes: lipSyncData.phonemes
      });
      
      setLipSyncResult(lipSyncData);

      // –≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ Remotion
      console.log('üé® –≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...');
      updateStage(2, 'running', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–∞...');

      const templateResponse = await fetch('/api/video/unified-render', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          inputVideoUrl: lipSyncData.videoUrl,
          templateName: 'LipSyncTemplate',
          options: {
            duration: lipSyncData.duration,
            effects: ['background', 'transitions', 'music']
          }
        })
      });

      if (!templateResponse.ok) {
        const error = await templateResponse.json();
        console.warn('‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω:', error);
        updateStage(2, 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
        setFinalVideo(lipSyncData.videoUrl);
        updateStage(3, 'success', '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ', { videoUrl: lipSyncData.videoUrl });
      } else {
        const templateData = await templateResponse.json();
        console.log('‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω:', templateData);
        updateStage(2, 'success', '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω', templateData);

        // –≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        updateStage(3, 'running', '–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ...');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const finalVideoUrl = templateData.videoUrl || lipSyncData.videoUrl;
        setFinalVideo(finalVideoUrl);
        updateStage(3, 'success', '–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!', { 
          videoUrl: finalVideoUrl,
          size: templateData.size || 'N/A'
        });
      }

      console.log('üéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –∫–∞–∫ –æ—à–∏–±–∫—É
      const runningIndex = stages.findIndex(s => s.status === 'running');
      if (runningIndex !== -1) {
        updateStage(runningIndex, 'error', errorMessage);
      }
    } finally {
      setIsRunning(false);
    }
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–∏–ø—Å–∏–Ω–≥–∞
  const testLipSyncOnly = async () => {
    setIsRunning(true);
    try {
      console.log('üß™ –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ª–∏–ø—Å–∏–Ω–≥–∞...');
      const response = await fetch('/api/video/generate-lipsync-real', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: "–¢–µ—Å—Ç –ª–∏–ø—Å–∏–Ω–≥–∞" })
      });

      const data = await response.json();
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:', data);
      alert(`–¢–µ—Å—Ç –ª–∏–ø—Å–∏–Ω–≥–∞: ${data.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}\n${data.message || data.error}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ' + (error instanceof Error ? error.message : 'Unknown'));
    } finally {
      setIsRunning(false);
    }
  };

  // –°—Ç–∞—Ç—É—Å –±–∞–¥–∂
  const StatusBadge: React.FC<{ status: StageResult['status'] }> = ({ status }) => {
    const colors = {
      pending: 'bg-gray-200 text-gray-700',
      running: 'bg-blue-500 text-white animate-pulse',
      success: 'bg-green-500 text-white',
      error: 'bg-red-500 text-white'
    };

    const icons = {
      pending: '‚è∏Ô∏è',
      running: '‚öôÔ∏è',
      success: '‚úÖ',
      error: '‚ùå'
    };

    return (
      <span className={`px-2 py-1 rounded text-xs font-semibold ${colors[status]}`}>
        {icons[status]} {status.toUpperCase()}
      </span>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-8 text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-600">
          üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–∏–ø—Å–∏–Ω–≥ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        </h1>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-2xl font-semibold mb-4">üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏–ø—Å–∏–Ω–≥–∞:
            </label>
            <textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={3}
              disabled={isRunning}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
            />
          </div>

          <div className="flex gap-4">
            <button
              onClick={runFullPipeline}
              disabled={isRunning || !text}
              className={`px-6 py-3 rounded-lg font-semibold transition-all ${
                isRunning || !text
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:shadow-lg transform hover:scale-105'
              }`}
            >
              {isRunning ? '‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω'}
            </button>

            <button
              onClick={testLipSyncOnly}
              disabled={isRunning}
              className={`px-6 py-3 rounded-lg font-semibold transition-all ${
                isRunning
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-green-500 text-white hover:bg-green-600'
              }`}
            >
              üß™ –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ª–∏–ø—Å–∏–Ω–≥–∞
            </button>

            <button
              onClick={() => setIsPlaying(!isPlaying)}
              className="px-6 py-3 rounded-lg font-semibold bg-yellow-500 text-white hover:bg-yellow-600"
            >
              {isPlaying ? '‚è∏Ô∏è –ü–∞—É–∑–∞' : '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏'} –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            </button>
          </div>
        </div>

        {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–∏–ø—Å–∏–Ω–≥–∞ */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-2xl font-semibold mb-4">üëÑ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–≥–∞</h2>
          <div className="flex justify-center">
            <LipSyncVisualizer 
              text={text}
              isPlaying={isPlaying}
              onPhonemeChange={setCurrentPhoneme}
            />
          </div>
          <div className="mt-4 text-center">
            <p className="text-lg">–¢–µ–∫—É—â–∞—è —Ñ–æ–Ω–µ–º–∞: <span className="font-bold text-blue-600">{currentPhoneme}</span></p>
          </div>
        </div>

        {/* –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-2xl font-semibold mb-4">üìä –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
          
          <div className="space-y-4">
            {stages.map((stage, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-lg font-semibold">{stage.stage}</h3>
                  <StatusBadge status={stage.status} />
                </div>
                
                <p className="text-gray-600 mb-2">{stage.message}</p>
                
                {stage.timestamp && (
                  <p className="text-xs text-gray-400">–í—Ä–µ–º—è: {stage.timestamp}</p>
                )}
                
                {stage.data && (
                  <div className="mt-2 p-2 bg-gray-50 rounded text-sm">
                    <pre className="text-xs overflow-x-auto">
                      {JSON.stringify(stage.data, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        {(lipSyncResult || finalVideo) && (
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-2xl font-semibold mb-4">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* –õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ */}
              {lipSyncResult && (
                <div className="border border-gray-200 rounded-lg p-4">
                  <h3 className="text-lg font-semibold mb-2">–õ–∏–ø—Å–∏–Ω–≥ –≤–∏–¥–µ–æ</h3>
                  <video 
                    controls 
                    className="w-full rounded-lg shadow-md"
                    src={lipSyncResult.videoUrl}
                  />
                  <div className="mt-2 text-sm text-gray-600">
                    <p>üìπ ID: {lipSyncResult.videoId}</p>
                    <p>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lipSyncResult.duration?.toFixed(2)}—Å</p>
                    <p>üéûÔ∏è –ö–∞–¥—Ä–æ–≤: {lipSyncResult.frames}</p>
                    <p>üó£Ô∏è –§–æ–Ω–µ–º: {lipSyncResult.phonemes}</p>
                  </div>
                </div>
              )}

              {/* –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ */}
              {finalVideo && (
                <div className="border border-gray-200 rounded-lg p-4">
                  <h3 className="text-lg font-semibold mb-2">–§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
                  <video 
                    controls 
                    className="w-full rounded-lg shadow-md"
                    src={finalVideo}
                  />
                  <div className="mt-2 text-sm text-gray-600">
                    <p>‚ú® –° –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏</p>
                    <p>üìç –ü—É—Ç—å: {finalVideo}</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TestLipSyncStages;

import path from "path";
import fs from "fs";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

interface RenderOptions {
  composition: string;
  inputProps: any;
  videoId: string;
}

interface RenderResult {
  type: "success" | "error";
  publicUrl?: string;
  localPath?: string;
  error?: string;
}

export async function renderVideoLocally({
  composition,
  inputProps,
  videoId,
}: RenderOptions): Promise<RenderResult> {
  console.log("üè† Starting LOCAL Remotion render...");
  console.log("üéØ Composition:", composition);
  console.log("üéØ Video ID:", videoId);
  console.log("üéØ Props:", JSON.stringify(inputProps, null, 2));

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.resolve("public/temp-videos");
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
      console.log("üìÅ Created temp directory:", tempDir);
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–ø—Å–∞–º–∏
    const propsFile = path.resolve(`public/temp-videos/${videoId}-props.json`);
    fs.writeFileSync(propsFile, JSON.stringify(inputProps, null, 2));
    console.log("üìã Props file created:", propsFile);

    // –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    const outputLocation = path.resolve(`public/temp-videos/${videoId}.mp4`);
    console.log("üìÅ Output location:", outputLocation);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Remotion CLI –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
    const command = `npx remotion render src/remotion/index.tsx ${composition} "${outputLocation}" --props="${propsFile}" --log=info`;

    console.log("üîß Running command:", command);

    const { stdout, stderr } = await execAsync(command, {
      cwd: process.cwd(),
      timeout: 300000, // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
    });

    if (stderr && !stderr.includes("warn")) {
      console.warn("‚ö†Ô∏è Render warnings:", stderr);
    }

    console.log("üìã Render output:", stdout);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
    if (!fs.existsSync(outputLocation)) {
      throw new Error("Video file was not created");
    }

    const stats = fs.statSync(outputLocation);
    console.log(`‚úÖ Video created successfully! Size: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–ø—Å–∞–º–∏
    if (fs.existsSync(propsFile)) {
      fs.unlinkSync(propsFile);
      console.log("üóëÔ∏è Cleaned up props file");
    }

    return {
      type: "success",
      publicUrl: `/temp-videos/${videoId}.mp4`,
      localPath: outputLocation,
    };
  } catch (error) {
    console.error("‚ùå Local render failed:", error);

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const propsFile = path.resolve(`public/temp-videos/${videoId}-props.json`);
    if (fs.existsSync(propsFile)) {
      fs.unlinkSync(propsFile);
      console.log("üóëÔ∏è Cleaned up props file after error");
    }

    return {
      type: "error",
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}
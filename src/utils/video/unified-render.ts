// üé¨ UNIFIED VIDEO RENDER UTILITY
import path from 'path';
import fs from 'fs';

interface RenderConfig {
  renderType: 'test' | 'heygen' | 'custom';
  heygenVideoUrl?: string;
  inputProps?: {
    musicVolume?: number;
    coverDuration?: number;
    vignetteStrength?: number;
    colorCorrection?: number;
    [key: string]: any;
  };
}

interface RenderResult {
  videoUrl: string;
  fileSize: string;
  duration: number;
  renderTime?: number;
  metadata?: any;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –∞—Å—Å–µ—Ç–∞–º
function normalizeAssetPath(assetPath: string): string {
  if (!assetPath) return '';
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∏–ª–∏ data URL
  if (assetPath.startsWith('http://') || 
      assetPath.startsWith('https://') || 
      assetPath.startsWith('data:')) {
    return assetPath;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
  if (assetPath.startsWith('/')) {
    return `http://localhost:80${assetPath}`;
  }
  
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if (assetPath.startsWith('./') || assetPath.startsWith('../')) {
    return path.resolve(process.cwd(), 'public', assetPath);
  }
  
  return assetPath;
}

// –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
async function simulateRender(duration: number = 5000): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, duration));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
export async function renderVideo(config: RenderConfig): Promise<RenderResult> {
  console.log('üé¨ === STARTING UNIFIED VIDEO RENDER ===');
  console.log('üìã Config:', config);
  
  const startTime = Date.now();
  const { renderType, heygenVideoUrl, inputProps = {} } = config;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –≤–∏–¥–µ–æ
  const videoUrl = normalizeAssetPath(heygenVideoUrl || '/test-assets/lip-sync.mp4');
  console.log('üìπ Normalized video URL:', videoUrl);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const timestamp = Date.now();
  const outputFileName = `${renderType}-${timestamp}.mp4`;
  const outputPath = `/rendered-videos/${outputFileName}`;
  
  console.log('üéØ Output path:', outputPath);
  
  try {
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const outputDir = path.join(process.cwd(), 'public', 'rendered-videos');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
      console.log('üìÅ Created output directory:', outputDir);
    }
    
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–Ω—É—é –ª–æ–≥–∏–∫—É
    switch (renderType) {
      case 'test':
        console.log('üß™ TEST MODE RENDER');
        console.log('üìä Props:', inputProps);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        await simulateRender(2000);
        
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        const testSourcePath = path.join(process.cwd(), 'public', 'test-assets', 'lip-sync.mp4');
        const testOutputPath = path.join(outputDir, outputFileName);
        
        if (fs.existsSync(testSourcePath)) {
          fs.copyFileSync(testSourcePath, testOutputPath);
          console.log('‚úÖ Test file copied successfully');
        }
        
        break;
        
      case 'heygen':
        console.log('üé§ HEYGEN MODE RENDER');
        console.log('üé• HeyGen video URL:', videoUrl);
        console.log('üìä Props:', inputProps);
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Remotion –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        // –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º
        await simulateRender(3000);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const heygenSourcePath = path.join(process.cwd(), 'public', 'test-assets', 'lip-sync.mp4');
        const heygenOutputPath = path.join(outputDir, outputFileName);
        
        if (fs.existsSync(heygenSourcePath)) {
          fs.copyFileSync(heygenSourcePath, heygenOutputPath);
          console.log('‚úÖ HeyGen render simulated');
        }
        
        break;
        
      case 'custom':
        console.log('üé® CUSTOM MODE RENDER');
        console.log('üìä Custom props:', inputProps);
        
        // –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        await simulateRender(4000);
        
        break;
        
      default:
        throw new Error(`Unknown render type: ${renderType}`);
    }
    
    const endTime = Date.now();
    const renderTime = (endTime - startTime) / 1000;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const filePath = path.join(outputDir, outputFileName);
    let fileSize = '0';
    let duration = 30; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      fileSize = (stats.size / (1024 * 1024)).toFixed(2); // –í –ú–ë
    }
    
    const result: RenderResult = {
      videoUrl: outputPath,
      fileSize: fileSize + ' MB',
      duration: duration,
      renderTime: renderTime,
      metadata: {
        renderType,
        timestamp,
        inputProps,
        originalVideo: heygenVideoUrl
      }
    };
    
    console.log('‚úÖ === RENDER COMPLETED SUCCESSFULLY ===');
    console.log('üìä Result:', result);
    
    return result;
    
  } catch (error: any) {
    console.error('‚ùå Render failed:', error);
    throw error;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export function getAssetPath(filename: string, type: 'video' | 'audio' | 'image' = 'video'): string {
  const assetDirs = {
    video: 'test-assets',
    audio: 'test-assets',
    image: 'test-assets'
  };
  
  return path.join('/', assetDirs[type], filename);
}

export function validateAssets(assets: string[]): boolean {
  const publicDir = path.join(process.cwd(), 'public');
  
  for (const asset of assets) {
    const assetPath = path.join(publicDir, asset);
    if (!fs.existsSync(assetPath)) {
      console.error(`‚ùå Asset not found: ${assetPath}`);
      return false;
    }
  }
  
  return true;
}
